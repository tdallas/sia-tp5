import numpy as np


font_1_input = [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
   [0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x04],
   [0x09, 0x09, 0x12, 0x00, 0x00, 0x00, 0x00],
   [0x0A, 0x0A, 0x1F, 0x0A, 0x1F, 0x0A, 0x0A],
   [0x04, 0x0F, 0x14, 0x0E, 0x05, 0x1E, 0x04],
   [0x19, 0x19, 0x02, 0x04, 0x08, 0x13, 0x13],
   [0x04, 0x0A, 0x0A, 0x0A, 0x15, 0x12, 0x0D],
   [0x04, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00],
   [0x02, 0x04, 0x08, 0x08, 0x08, 0x04, 0x02],
   [0x08, 0x04, 0x02, 0x02, 0x02, 0x04, 0x08],
   [0x04, 0x15, 0x0E, 0x1F, 0x0E, 0x15, 0x04],
   [0x00, 0x04, 0x04, 0x1F, 0x04, 0x04, 0x00],
   [0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x08],
   [0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00],
   [0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C],
   [0x01, 0x01, 0x02, 0x04, 0x08, 0x10, 0x10],
   [0x0E, 0x11, 0x13, 0x15, 0x19, 0x11, 0x0E],
   [0x04, 0x0C, 0x04, 0x04, 0x04, 0x04, 0x0E],
   [0x0E, 0x11, 0x01, 0x02, 0x04, 0x08, 0x1F],
   [0x0E, 0x11, 0x01, 0x06, 0x01, 0x11, 0x0E],
   [0x02, 0x06, 0x0A, 0x12, 0x1F, 0x02, 0x02],
   [0x1F, 0x10, 0x1E, 0x01, 0x01, 0x11, 0x0E],
   [0x06, 0x08, 0x10, 0x1E, 0x11, 0x11, 0x0E],
   [0x1F, 0x01, 0x02, 0x04, 0x08, 0x08, 0x08],
   [0x0E, 0x11, 0x11, 0x0E, 0x11, 0x11, 0x0E],
   [0x0E, 0x11, 0x11, 0x0F, 0x01, 0x02, 0x0C],
   [0x00, 0x0C, 0x0C, 0x00, 0x0C, 0x0C, 0x00],
   [0x00, 0x0C, 0x0C, 0x00, 0x0C, 0x04, 0x08],
   [0x02, 0x04, 0x08, 0x10, 0x08, 0x04, 0x02],
   [0x00, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x00],
   [0x08, 0x04, 0x02, 0x01, 0x02, 0x04, 0x08],
   [0x0E, 0x11, 0x01, 0x02, 0x04, 0x00, 0x04]]

font_1_output = [0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F]

font_2_input = [[0x0E, 0x11, 0x17, 0x15, 0x17, 0x10, 0x0F],
   [0x04, 0x0A, 0x11, 0x11, 0x1F, 0x11, 0x11],
   [0x1E, 0x11, 0x11, 0x1E, 0x11, 0x11, 0x1E],
   [0x0E, 0x11, 0x10, 0x10, 0x10, 0x11, 0x0E],
   [0x1E, 0x09, 0x09, 0x09, 0x09, 0x09, 0x1E],
   [0x1F, 0x10, 0x10, 0x1C, 0x10, 0x10, 0x1F],
   [0x1F, 0x10, 0x10, 0x1F, 0x10, 0x10, 0x10],
   [0x0E, 0x11, 0x10, 0x10, 0x13, 0x11, 0x0F],
   [0x11, 0x11, 0x11, 0x1F, 0x11, 0x11, 0x11],
   [0x0E, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0E],
   [0x1F, 0x02, 0x02, 0x02, 0x02, 0x12, 0x0C],
   [0x11, 0x12, 0x14, 0x18, 0x14, 0x12, 0x11],
   [0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1F],
   [0x11, 0x1B, 0x15, 0x11, 0x11, 0x11, 0x11],
   [0x11, 0x11, 0x19, 0x15, 0x13, 0x11, 0x11],
   [0x0E, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0E],
   [0x1E, 0x11, 0x11, 0x1E, 0x10, 0x10, 0x10],
   [0x0E, 0x11, 0x11, 0x11, 0x15, 0x12, 0x0D],
   [0x1E, 0x11, 0x11, 0x1E, 0x14, 0x12, 0x11],
   [0x0E, 0x11, 0x10, 0x0E, 0x01, 0x11, 0x0E],
   [0x1F, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04],
   [0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0E],
   [0x11, 0x11, 0x11, 0x11, 0x11, 0x0A, 0x04],
   [0x11, 0x11, 0x11, 0x15, 0x15, 0x1B, 0x11],
   [0x11, 0x11, 0x0A, 0x04, 0x0A, 0x11, 0x11],
   [0x11, 0x11, 0x0A, 0x04, 0x04, 0x04, 0x04],
   [0x1F, 0x01, 0x02, 0x04, 0x08, 0x10, 0x1F],
   [0x0E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0E],
   [0x10, 0x10, 0x08, 0x04, 0x02, 0x01, 0x01],
   [0x0E, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0E],
   [0x04, 0x0A, 0x11, 0x00, 0x00, 0x00, 0x00],
   [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F]]

font_2_output = [0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F]

font_3_input = [[0x04, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00],
   [0x00, 0x0E, 0x01, 0x0D, 0x13, 0x13, 0x0D],
   [0x10, 0x10, 0x10, 0x1C, 0x12, 0x12, 0x1C],
   [0x00, 0x00, 0x00, 0x0E, 0x10, 0x10, 0x0E],
   [0x01, 0x01, 0x01, 0x07, 0x09, 0x09, 0x07],
   [0x00, 0x00, 0x0E, 0x11, 0x1F, 0x10, 0x0F],
   [0x06, 0x09, 0x08, 0x1C, 0x08, 0x08, 0x08],
   [0x0E, 0x11, 0x13, 0x0D, 0x01, 0x01, 0x0E],
   [0x10, 0x10, 0x10, 0x16, 0x19, 0x11, 0x11],
   [0x00, 0x04, 0x00, 0x0C, 0x04, 0x04, 0x0E],
   [0x02, 0x00, 0x06, 0x02, 0x02, 0x12, 0x0C],
   [0x10, 0x10, 0x12, 0x14, 0x18, 0x14, 0x12],
   [0x0C, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04],
   [0x00, 0x00, 0x0A, 0x15, 0x15, 0x11, 0x11],
   [0x00, 0x00, 0x16, 0x19, 0x11, 0x11, 0x11],
   [0x00, 0x00, 0x0E, 0x11, 0x11, 0x11, 0x0E],
   [0x00, 0x1C, 0x12, 0x12, 0x1C, 0x10, 0x10],
   [0x00, 0x07, 0x09, 0x09, 0x07, 0x01, 0x01],
   [0x00, 0x00, 0x16, 0x19, 0x10, 0x10, 0x10],
   [0x00, 0x00, 0x0F, 0x10, 0x0E, 0x01, 0x1E],
   [0x08, 0x08, 0x1C, 0x08, 0x08, 0x09, 0x06],
   [0x00, 0x00, 0x11, 0x11, 0x11, 0x13, 0x0D],
   [0x00, 0x00, 0x11, 0x11, 0x11, 0x0A, 0x04],
   [0x00, 0x00, 0x11, 0x11, 0x15, 0x15, 0x0A],
   [0x00, 0x00, 0x11, 0x0A, 0x04, 0x0A, 0x11],
   [0x00, 0x11, 0x11, 0x0F, 0x01, 0x11, 0x0E],
   [0x00, 0x00, 0x1F, 0x02, 0x04, 0x08, 0x1F],
   [0x06, 0x08, 0x08, 0x10, 0x08, 0x08, 0x06],
   [0x04, 0x04, 0x04, 0x00, 0x04, 0x04, 0x04],
   [0x0C, 0x02, 0x02, 0x01, 0x02, 0x02, 0x0C],
   [0x08, 0x15, 0x02, 0x00, 0x00, 0x00, 0x00],
   [0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F]]

font_3_output = [0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F]


def parse_input(input):
    parsed_input = []
    for letter in input:
        parsed_letter = []
        for hex_value in letter:
            binary_value = bin(hex_value)
            binary_value = binary_value.split('0b')[1]
            while len(binary_value) < 5:
                binary_value = '0' + binary_value
            for char in binary_value:
                parsed_letter.append(int(char))
        parsed_input.append(parsed_letter)
    return parsed_input

def parse_output(output):
    parsed_output = []
    for elem in output:
        parsed_output.append(chr(elem))
    return parsed_output

def get_input(font_number):
    if font_number == 1:
        return np.array(parse_input(font_1_input))
    elif font_number == 2:
        return np.array(parse_input(font_2_input))
    else:
        return np.array(parse_input(font_3_input))

def get_output(font_number):
    if font_number == 1:
        return parse_output(font_1_output)
    elif font_number == 2:
        return parse_output(font_2_output)
    else:
        return parse_output(font_3_output)